
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler;

import java.io.*;
import Absyn.*;
import Symbol.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\005\000\002\002\003" +
    "\000\002\002\003\000\002\002\004\000\002\002\006\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\011\000" +
    "\002\002\010\000\002\002\005\000\002\002\005\000\002" +
    "\002\010\000\002\002\006\000\002\002\006\000\002\002" +
    "\012\000\002\002\003\000\002\002\007\000\002\004\004" +
    "\000\002\004\002\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\013\006\000\002\016\003\000\002" +
    "\016\010\000\002\016\005\000\002\017\006\000\002\017" +
    "\002\000\002\020\007\000\002\020\002\000\002\014\006" +
    "\000\002\014\010\000\002\015\011\000\002\015\013\000" +
    "\002\003\005\000\002\003\005\000\002\003\006\000\002" +
    "\003\006\000\002\006\004\000\002\006\002\000\002\007" +
    "\005\000\002\007\002\000\002\010\004\000\002\010\002" +
    "\000\002\011\005\000\002\011\002\000\002\012\007\000" +
    "\002\012\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\030\004\010\005\012\014\004\034\015\037" +
    "\006\041\007\043\020\044\017\055\005\056\014\057\016" +
    "\001\002\000\030\004\010\005\012\014\004\034\015\037" +
    "\006\041\007\043\020\044\017\055\005\056\014\057\016" +
    "\001\002\000\070\002\ufffc\006\ufffc\010\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\031\ufffc\032" +
    "\ufffc\035\ufffc\036\ufffc\040\ufffc\042\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\052\ufffc\053\ufffc\001\002\000\030\004\010\005" +
    "\012\014\004\034\015\037\006\041\007\043\020\044\017" +
    "\055\005\056\014\057\016\001\002\000\004\057\214\001" +
    "\002\000\070\002\ufffe\006\ufffe\010\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\031\ufffe\032\ufffe" +
    "\035\ufffe\036\ufffe\040\ufffe\042\ufffe\045\ufffe\046\ufffe\047" +
    "\ufffe\052\ufffe\053\ufffe\001\002\000\034\002\213\013\067" +
    "\014\057\015\066\016\061\017\065\020\064\021\071\022" +
    "\070\023\074\024\072\025\060\026\073\001\002\000\032" +
    "\004\010\005\012\006\uffcc\014\004\034\015\037\006\041" +
    "\007\043\020\044\017\055\005\056\014\057\016\001\002" +
    "\000\076\002\000\006\000\010\000\011\203\012\000\013" +
    "\000\014\000\015\000\016\000\017\000\020\000\021\000" +
    "\022\000\023\000\024\000\025\000\026\000\027\202\031" +
    "\000\032\000\033\204\035\000\036\000\040\000\042\000" +
    "\045\000\046\000\047\000\052\000\053\000\001\002\000" +
    "\070\002\ufffb\006\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\031\ufffb\032\ufffb\035\ufffb" +
    "\036\ufffb\040\ufffb\042\ufffb\045\ufffb\046\ufffb\047\ufffb\052" +
    "\ufffb\053\ufffb\001\002\000\030\004\010\005\012\014\004" +
    "\034\015\037\006\041\007\043\020\044\017\055\005\056" +
    "\014\057\016\001\002\000\102\002\uffff\005\142\006\uffff" +
    "\007\141\010\uffff\011\144\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\143\031\uffff\032\uffff\033" +
    "\145\035\uffff\036\uffff\040\uffff\042\uffff\045\uffff\046\uffff" +
    "\047\uffff\052\uffff\053\uffff\001\002\000\012\045\uffe1\047" +
    "\027\052\022\053\021\001\002\000\070\002\uffe4\006\uffe4" +
    "\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\031\uffe4\032\uffe4\035\uffe4\036\uffe4\040\uffe4\042" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\052\uffe4\053\uffe4\001\002" +
    "\000\004\057\123\001\002\000\004\057\114\001\002\000" +
    "\012\045\uffe0\047\uffe0\052\uffe0\053\uffe0\001\002\000\012" +
    "\045\uffdf\047\uffdf\052\uffdf\053\uffdf\001\002\000\004\045" +
    "\054\001\002\000\012\045\uffde\047\uffde\052\uffde\053\uffde" +
    "\001\002\000\004\057\032\001\002\000\012\045\uffe1\047" +
    "\027\052\022\053\021\001\002\000\004\045\uffe2\001\002" +
    "\000\004\017\033\001\002\000\010\007\036\050\037\057" +
    "\035\001\002\000\012\045\uffdd\047\uffdd\052\uffdd\053\uffdd" +
    "\001\002\000\012\045\uffdc\047\uffdc\052\uffdc\053\uffdc\001" +
    "\002\000\004\057\042\001\002\000\004\051\040\001\002" +
    "\000\004\057\041\001\002\000\012\045\uffda\047\uffda\052" +
    "\uffda\053\uffda\001\002\000\004\030\043\001\002\000\004" +
    "\057\044\001\002\000\006\010\uffd6\031\045\001\002\000" +
    "\004\057\050\001\002\000\004\010\047\001\002\000\012" +
    "\045\uffdb\047\uffdb\052\uffdb\053\uffdb\001\002\000\004\030" +
    "\051\001\002\000\004\057\052\001\002\000\010\006\uffd6" +
    "\010\uffd6\031\045\001\002\000\006\006\uffd7\010\uffd7\001" +
    "\002\000\032\004\010\005\012\014\004\034\015\037\006" +
    "\041\007\043\020\044\017\046\uffcc\055\005\056\014\057" +
    "\016\001\002\000\004\046\113\001\002\000\040\006\uffca" +
    "\013\067\014\057\015\066\016\061\017\065\020\064\021" +
    "\071\022\070\023\074\024\072\025\060\026\073\032\062" +
    "\046\uffca\001\002\000\030\004\010\005\012\014\004\034" +
    "\015\037\006\041\007\043\020\044\017\055\005\056\014" +
    "\057\016\001\002\000\030\004\010\005\012\014\004\034" +
    "\015\037\006\041\007\043\020\044\017\055\005\056\014" +
    "\057\016\001\002\000\030\004\010\005\012\014\004\034" +
    "\015\037\006\041\007\043\020\044\017\055\005\056\014" +
    "\057\016\001\002\000\030\004\010\005\012\014\004\034" +
    "\015\037\006\041\007\043\020\044\017\055\005\056\014" +
    "\057\016\001\002\000\006\006\uffcd\046\uffcd\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\054\002\ufff0\006\ufff0\010\ufff0\012\ufff0\013\067\014\057" +
    "\015\066\016\061\025\ufff0\026\ufff0\031\ufff0\032\ufff0\035" +
    "\ufff0\036\ufff0\040\ufff0\042\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\052\ufff0\053\ufff0\001\002\000\070\002\uffed\006\uffed\010" +
    "\uffed\012\uffed\013\067\014\057\015\066\016\061\017\065" +
    "\020\064\021\071\022\070\023\074\024\072\025\uffed\026" +
    "\uffed\031\uffed\032\uffed\035\uffed\036\uffed\040\uffed\042\uffed" +
    "\045\uffed\046\uffed\047\uffed\052\uffed\053\uffed\001\002\000" +
    "\054\002\uffef\006\uffef\010\uffef\012\uffef\013\067\014\057" +
    "\015\066\016\061\025\uffef\026\uffef\031\uffef\032\uffef\035" +
    "\uffef\036\uffef\040\uffef\042\uffef\045\uffef\046\uffef\047\uffef" +
    "\052\uffef\053\uffef\001\002\000\054\002\ufff2\006\ufff2\010" +
    "\ufff2\012\ufff2\013\067\014\057\015\066\016\061\025\ufff2" +
    "\026\ufff2\031\ufff2\032\ufff2\035\ufff2\036\ufff2\040\ufff2\042" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\052\ufff2\053\ufff2\001\002" +
    "\000\054\002\ufff1\006\ufff1\010\ufff1\012\ufff1\013\067\014" +
    "\057\015\066\016\061\025\ufff1\026\ufff1\031\ufff1\032\ufff1" +
    "\035\ufff1\036\ufff1\040\ufff1\042\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\052\ufff1\053\ufff1\001\002\000\070\002\ufff8\006\ufff8" +
    "\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015\066\016\061\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\031\ufff8\032\ufff8\035\ufff8\036\ufff8\040\ufff8\042" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\052\ufff8\053\ufff8\001\002" +
    "\000\070\002\ufff6\006\ufff6\010\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\031\ufff6\032\ufff6\035" +
    "\ufff6\036\ufff6\040\ufff6\042\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\052\ufff6\053\ufff6\001\002\000\054\002\ufff4\006\ufff4\010" +
    "\ufff4\012\ufff4\013\067\014\057\015\066\016\061\025\ufff4" +
    "\026\ufff4\031\ufff4\032\ufff4\035\ufff4\036\ufff4\040\ufff4\042" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\052\ufff4\053\ufff4\001\002" +
    "\000\054\002\ufff3\006\ufff3\010\ufff3\012\ufff3\013\067\014" +
    "\057\015\066\016\061\025\ufff3\026\ufff3\031\ufff3\032\ufff3" +
    "\035\ufff3\036\ufff3\040\ufff3\042\ufff3\045\ufff3\046\ufff3\047" +
    "\ufff3\052\ufff3\053\ufff3\001\002\000\040\006\uffca\013\067" +
    "\014\057\015\066\016\061\017\065\020\064\021\071\022" +
    "\070\023\074\024\072\025\060\026\073\032\062\046\uffca" +
    "\001\002\000\006\006\uffcb\046\uffcb\001\002\000\070\002" +
    "\ufff5\006\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\031\ufff5\032\ufff5\035\ufff5\036\ufff5" +
    "\040\ufff5\042\ufff5\045\ufff5\046\ufff5\047\ufff5\052\ufff5\053" +
    "\ufff5\001\002\000\070\002\uffee\006\uffee\010\uffee\012\uffee" +
    "\013\067\014\057\015\066\016\061\017\065\020\064\021" +
    "\071\022\070\023\074\024\072\025\uffee\026\uffee\031\uffee" +
    "\032\uffee\035\uffee\036\uffee\040\uffee\042\uffee\045\uffee\046" +
    "\uffee\047\uffee\052\uffee\053\uffee\001\002\000\070\002\ufff7" +
    "\006\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\066\016" +
    "\061\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\031\ufff7\032\ufff7\035\ufff7\036\ufff7\040" +
    "\ufff7\042\ufff7\045\ufff7\046\ufff7\047\ufff7\052\ufff7\053\ufff7" +
    "\001\002\000\070\002\uffe3\006\uffe3\010\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\031\uffe3\032" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\042\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\052\uffe3\053\uffe3\001\002\000\006\027\115\030" +
    "\116\001\002\000\030\004\010\005\012\014\004\034\015" +
    "\037\006\041\007\043\020\044\017\055\005\056\014\057" +
    "\016\001\002\000\004\057\117\001\002\000\004\027\120" +
    "\001\002\000\030\004\010\005\012\014\004\034\015\037" +
    "\006\041\007\043\020\044\017\055\005\056\014\057\016" +
    "\001\002\000\042\013\067\014\057\015\066\016\061\017" +
    "\065\020\064\021\071\022\070\023\074\024\072\025\060" +
    "\026\073\045\uffd4\047\uffd4\052\uffd4\053\uffd4\001\002\000" +
    "\042\013\067\014\057\015\066\016\061\017\065\020\064" +
    "\021\071\022\070\023\074\024\072\025\060\026\073\045" +
    "\uffd5\047\uffd5\052\uffd5\053\uffd5\001\002\000\004\005\124" +
    "\001\002\000\006\006\uffd8\057\125\001\002\000\004\030" +
    "\136\001\002\000\004\006\127\001\002\000\006\017\130" +
    "\030\131\001\002\000\030\004\010\005\012\014\004\034" +
    "\015\037\006\041\007\043\020\044\017\055\005\056\014" +
    "\057\016\001\002\000\004\057\132\001\002\000\004\017" +
    "\133\001\002\000\030\004\010\005\012\014\004\034\015" +
    "\037\006\041\007\043\020\044\017\055\005\056\014\057" +
    "\016\001\002\000\042\013\067\014\057\015\066\016\061" +
    "\017\065\020\064\021\071\022\070\023\074\024\072\025" +
    "\060\026\073\045\uffd2\047\uffd2\052\uffd2\053\uffd2\001\002" +
    "\000\042\013\067\014\057\015\066\016\061\017\065\020" +
    "\064\021\071\022\070\023\074\024\072\025\060\026\073" +
    "\045\uffd3\047\uffd3\052\uffd3\053\uffd3\001\002\000\004\057" +
    "\137\001\002\000\006\006\uffd6\031\045\001\002\000\004" +
    "\006\uffd9\001\002\000\004\057\163\001\002\000\032\004" +
    "\010\005\012\006\uffc8\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\030\004\010\005\012\014\004\034\015\037\006\041\007" +
    "\043\020\044\017\055\005\056\014\057\016\001\002\000" +
    "\004\057\146\001\002\000\076\002\uffd0\006\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\042\uffd0\045\uffd0\046\uffd0\047\uffd0\052\uffd0" +
    "\053\uffd0\001\002\000\034\012\150\013\067\014\057\015" +
    "\066\016\061\017\065\020\064\021\071\022\070\023\074" +
    "\024\072\025\060\026\073\001\002\000\100\002\uffce\006" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\031\uffce\032\uffce\033\uffce" +
    "\035\uffce\036\uffce\040\uffce\042\uffce\045\uffce\046\uffce\047" +
    "\uffce\051\151\052\uffce\053\uffce\001\002\000\030\004\010" +
    "\005\012\014\004\034\015\037\006\041\007\043\020\044" +
    "\017\055\005\056\014\057\016\001\002\000\070\002\uffeb" +
    "\006\uffeb\010\uffeb\012\uffeb\013\067\014\057\015\066\016" +
    "\061\017\065\020\064\021\071\022\070\023\074\024\072" +
    "\025\060\026\073\031\uffeb\032\uffeb\035\uffeb\036\uffeb\040" +
    "\uffeb\042\uffeb\045\uffeb\046\uffeb\047\uffeb\052\uffeb\053\uffeb" +
    "\001\002\000\070\002\uffe9\006\uffe9\010\uffe9\012\uffe9\013" +
    "\067\014\057\015\066\016\061\017\065\020\064\021\071" +
    "\022\070\023\074\024\072\025\060\026\073\031\uffe9\032" +
    "\uffe9\035\uffe9\036\uffe9\040\uffe9\042\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\052\uffe9\053\uffe9\001\002\000\036\006\uffc6\013" +
    "\067\014\057\015\066\016\061\017\065\020\064\021\071" +
    "\022\070\023\074\024\072\025\060\026\073\031\160\001" +
    "\002\000\004\006\156\001\002\000\070\002\ufff9\006\ufff9" +
    "\010\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\031\ufff9\032\ufff9\035\ufff9\036\ufff9\040\ufff9\042" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\052\ufff9\053\ufff9\001\002" +
    "\000\004\006\uffc9\001\002\000\030\004\010\005\012\014" +
    "\004\034\015\037\006\041\007\043\020\044\017\055\005" +
    "\056\014\057\016\001\002\000\036\006\uffc6\013\067\014" +
    "\057\015\066\016\061\017\065\020\064\021\071\022\070" +
    "\023\074\024\072\025\060\026\073\031\160\001\002\000" +
    "\004\006\uffc7\001\002\000\004\017\164\001\002\000\030" +
    "\004\010\005\012\014\004\034\015\037\006\041\007\043" +
    "\020\044\017\055\005\056\014\057\016\001\002\000\036" +
    "\010\uffc4\013\067\014\057\015\066\016\061\017\065\020" +
    "\064\021\071\022\070\023\074\024\072\025\060\026\073" +
    "\031\167\001\002\000\004\010\174\001\002\000\004\057" +
    "\170\001\002\000\004\017\171\001\002\000\030\004\010" +
    "\005\012\014\004\034\015\037\006\041\007\043\020\044" +
    "\017\055\005\056\014\057\016\001\002\000\036\010\uffc4" +
    "\013\067\014\057\015\066\016\061\017\065\020\064\021" +
    "\071\022\070\023\074\024\072\025\060\026\073\031\167" +
    "\001\002\000\004\010\uffc5\001\002\000\070\002\uffec\006" +
    "\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\031\uffec\032\uffec\035\uffec\036\uffec\040\uffec" +
    "\042\uffec\045\uffec\046\uffec\047\uffec\052\uffec\053\uffec\001" +
    "\002\000\034\013\067\014\057\015\066\016\061\017\065" +
    "\020\064\021\071\022\070\023\074\024\072\025\060\026" +
    "\073\035\176\001\002\000\030\004\010\005\012\014\004" +
    "\034\015\037\006\041\007\043\020\044\017\055\005\056" +
    "\014\057\016\001\002\000\070\002\uffe7\006\uffe7\010\uffe7" +
    "\012\uffe7\013\067\014\057\015\066\016\061\017\065\020" +
    "\064\021\071\022\070\023\074\024\072\025\060\026\073" +
    "\031\uffe7\032\uffe7\035\uffe7\036\200\040\uffe7\042\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\052\uffe7\053\uffe7\001\002\000\030" +
    "\004\010\005\012\014\004\034\015\037\006\041\007\043" +
    "\020\044\017\055\005\056\014\057\016\001\002\000\070" +
    "\002\uffe8\006\uffe8\010\uffe8\012\uffe8\013\067\014\057\015" +
    "\066\016\061\017\065\020\064\021\071\022\070\023\074" +
    "\024\072\025\060\026\073\031\uffe8\032\uffe8\035\uffe8\036" +
    "\uffe8\040\uffe8\042\uffe8\045\uffe8\046\uffe8\047\uffe8\052\uffe8" +
    "\053\uffe8\001\002\000\030\004\010\005\012\014\004\034" +
    "\015\037\006\041\007\043\020\044\017\055\005\056\014" +
    "\057\016\001\002\000\030\004\010\005\012\014\004\034" +
    "\015\037\006\041\007\043\020\044\017\055\005\056\014" +
    "\057\016\001\002\000\004\057\205\001\002\000\076\002" +
    "\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\035\uffd1\036\uffd1\040\uffd1\042\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\052\uffd1\053\uffd1\001\002\000\034\012\207" +
    "\013\067\014\057\015\066\016\061\017\065\020\064\021" +
    "\071\022\070\023\074\024\072\025\060\026\073\001\002" +
    "\000\076\002\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\040\uffcf\042\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\052\uffcf\053\uffcf\001\002\000" +
    "\070\002\uffea\006\uffea\010\uffea\012\uffea\013\067\014\057" +
    "\015\066\016\061\017\065\020\064\021\071\022\070\023" +
    "\074\024\072\025\060\026\073\031\uffea\032\uffea\035\uffea" +
    "\036\uffea\040\uffea\042\uffea\045\uffea\046\uffea\047\uffea\052" +
    "\uffea\053\uffea\001\002\000\004\006\212\001\002\000\070" +
    "\002\ufffd\006\ufffd\010\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\031\ufffd\032\ufffd\035\ufffd\036" +
    "\ufffd\040\ufffd\042\ufffd\045\ufffd\046\ufffd\047\ufffd\052\ufffd" +
    "\053\ufffd\001\002\000\004\002\001\001\002\000\004\027" +
    "\215\001\002\000\030\004\010\005\012\014\004\034\015" +
    "\037\006\041\007\043\020\044\017\055\005\056\014\057" +
    "\016\001\002\000\034\013\067\014\057\015\066\016\061" +
    "\017\065\020\064\021\071\022\070\023\074\024\072\025" +
    "\060\026\073\042\217\001\002\000\030\004\010\005\012" +
    "\014\004\034\015\037\006\041\007\043\020\044\017\055" +
    "\005\056\014\057\016\001\002\000\034\013\067\014\057" +
    "\015\066\016\061\017\065\020\064\021\071\022\070\023" +
    "\074\024\072\025\060\026\073\040\221\001\002\000\030" +
    "\004\010\005\012\014\004\034\015\037\006\041\007\043" +
    "\020\044\017\055\005\056\014\057\016\001\002\000\070" +
    "\002\uffe5\006\uffe5\010\uffe5\012\uffe5\013\067\014\057\015" +
    "\066\016\061\017\065\020\064\021\071\022\070\023\074" +
    "\024\072\025\060\026\073\031\uffe5\032\uffe5\035\uffe5\036" +
    "\uffe5\040\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5\052\uffe5" +
    "\053\uffe5\001\002\000\034\013\067\014\057\015\066\016" +
    "\061\017\065\020\064\021\071\022\070\023\074\024\072" +
    "\025\060\026\073\040\224\001\002\000\030\004\010\005" +
    "\012\014\004\034\015\037\006\041\007\043\020\044\017" +
    "\055\005\056\014\057\016\001\002\000\070\002\uffe6\006" +
    "\uffe6\010\uffe6\012\uffe6\013\067\014\057\015\066\016\061" +
    "\017\065\020\064\021\071\022\070\023\074\024\072\025" +
    "\060\026\073\031\uffe6\032\uffe6\035\uffe6\036\uffe6\040\uffe6" +
    "\042\uffe6\045\uffe6\046\uffe6\047\uffe6\052\uffe6\053\uffe6\001" +
    "\002\000\070\002\ufffa\006\ufffa\010\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\031\ufffa\032\ufffa" +
    "\035\ufffa\036\ufffa\040\ufffa\042\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\052\ufffa\053\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\006\002\010\003\012\001\001\000\006\002" +
    "\225\003\012\001\001\000\002\001\001\000\006\002\222" +
    "\003\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\055\003\012\006\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\174\003" +
    "\012\001\001\000\002\001\001\000\014\004\024\005\027" +
    "\013\022\014\023\015\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\030\005\027\013\022\014\023\015\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\052" +
    "\001\001\000\002\001\001\000\010\002\055\003\012\006" +
    "\054\001\001\000\002\001\001\000\004\007\062\001\001" +
    "\000\006\002\111\003\012\001\001\000\006\002\110\003" +
    "\012\001\001\000\006\002\107\003\012\001\001\000\006" +
    "\002\105\003\012\001\001\000\002\001\001\000\006\002" +
    "\104\003\012\001\001\000\006\002\103\003\012\001\001" +
    "\000\006\002\102\003\012\001\001\000\006\002\101\003" +
    "\012\001\001\000\006\002\100\003\012\001\001\000\006" +
    "\002\077\003\012\001\001\000\006\002\076\003\012\001" +
    "\001\000\006\002\075\003\012\001\001\000\006\002\074" +
    "\003\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\121\003\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\120\003" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\134\003\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\133\003\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\153\003\012\010\154" +
    "\001\001\000\006\002\152\003\012\001\001\000\006\002" +
    "\146\003\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\151\003" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\160\003\012\001\001\000\004" +
    "\011\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\164\003\012\001\001\000\004\012\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\171\003\012\001\001\000\004\012\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\176\003\012\001\001\000\002\001\001\000\006" +
    "\002\200\003\012\001\001\000\002\001\001\000\006\002" +
    "\207\003\012\001\001\000\006\002\205\003\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\215\003\012\001\001\000\002\001\001\000\006\002\217" +
    "\003\012\001\001\000\002\001\001\000\006\002\221\003" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\224\003\012\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		Yylex lexer = new Yylex(System.in);
		parser p = new parser(lexer);
		Exp result = (Exp) p.parse().value;
		Print pr = new Print(System.out);
		pr.prExp(result, 0);
		System.out.println("\n");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exp ::= l_value 
            {
              Exp RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExp(lv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= ID 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExp(new SimpleVar(Symbol.symbol(id))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new NilExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= LPAR expseq RPAR 
            {
              Exp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SeqExp(es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= NUM 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntExp(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= STRING 
            {
              Exp RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringExp(string); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= MINUS exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new IntExp(0), OpExp.MINUS, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= ID LPAR args RPAR 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int agleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int agright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList ag = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExp(Symbol.symbol(id), ag); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.PLUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.MINUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp STAR exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.MUL, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp SLASH exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.DIV, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp EQUAL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.EQ, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp NEQUAL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.NE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp LT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.LT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp GT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.GT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp LEQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.LE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp GEQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.GE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(e1, e2, new IntExp(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp OR exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(e1, new IntExp(1), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= ID LCBR ID EQUAL exp idexps RCBR 
            {
              Exp RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldExpList idex = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordExp(Symbol.symbol(tid), new FieldExpList(Symbol.symbol(id), e, idex)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= ID LSBR exp RSBR OF exp 
            {
              Exp RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayExp(Symbol.symbol(tid), e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= l_value ATTR exp 
            {
              Exp RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(lv, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= ID ATTR exp 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(new SimpleVar(Symbol.symbol(id)), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= IF exp THEN exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= WHILE exp DO exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= FOR ID ATTR exp TO exp DO exp 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForExp(new VarDec(Symbol.symbol(id), new NameTy(Symbol.symbol("int")), e1), e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= BREAK 
            {
              Exp RESULT =null;
		 RESULT = new BreakExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= LET decs IN expseq END 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LetExp(d, new SeqExp(es)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decs ::= dec decs 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList ds = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(d, ds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decs ::= 
            {
              DecList RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec ::= tydec 
            {
              Dec RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec td = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = td; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec ::= vardec 
            {
              Dec RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec vd = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec ::= fundec 
            {
              Dec RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec fd = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tydec ::= TYPE ID EQUAL ty 
            {
              TypeDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new TypeDec(Symbol.symbol(id), t, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tydec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ty ::= ID 
            {
              Ty RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new NameTy(Symbol.symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ty",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ty ::= LCBR ID COLON ID tyfields1 RCBR 
            {
              Ty RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tf1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tf1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList tf1 = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new RecordTy(new FieldList(Symbol.symbol(id), Symbol.symbol(tid), tf1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ty",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ty ::= ARRAY OF ID 
            {
              Ty RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ArrayTy(Symbol.symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ty",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tyfields ::= ID COLON ID tyfields1 
            {
              FieldList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tf1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tf1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList tf1 = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FieldList(Symbol.symbol(id), Symbol.symbol(tid), tf1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tyfields ::= 
            {
              FieldList RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tyfields1 ::= COMMA ID COLON ID tyfields1 
            {
              FieldList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tf1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tf1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList tf1 = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FieldList(Symbol.symbol(id), Symbol.symbol(tid), tf1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tyfields1 ::= 
            {
              FieldList RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vardec ::= VAR ID ATTR exp 
            {
              VarDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new VarDec(Symbol.symbol(id), null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // vardec ::= VAR ID COLON ID ATTR exp 
            {
              VarDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new VarDec(Symbol.symbol(id), new NameTy(Symbol.symbol(tid)), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fundec ::= FUNC ID LPAR tyfields RPAR EQUAL exp 
            {
              FunctionDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FunctionDec(Symbol.symbol(id), tf, null, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fundec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fundec ::= FUNC ID LPAR tyfields RPAR COLON ID EQUAL exp 
            {
              FunctionDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FunctionDec(Symbol.symbol(id), tf, new NameTy(Symbol.symbol(tid)), e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fundec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // l_value ::= l_value DOT ID 
            {
              Var RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FieldVar(lv, Symbol.symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // l_value ::= ID DOT ID 
            {
              Var RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FieldVar(new SimpleVar(Symbol.symbol(id1)), Symbol.symbol(id2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // l_value ::= l_value LSBR exp RSBR 
            {
              Var RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new SubscriptVar(lv, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // l_value ::= ID LSBR exp RSBR 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new SubscriptVar(new SimpleVar(Symbol.symbol(id)), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expseq ::= exp expseq1 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int es1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList es1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpList(e, es1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expseq",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expseq ::= 
            {
              ExpList RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expseq",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expseq1 ::= SEMI exp expseq1 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int es1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList es1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpList(e, es1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expseq1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expseq1 ::= 
            {
              ExpList RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expseq1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // args ::= exp args1 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList a1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpList(e, a1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args ::= 
            {
              ExpList RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // args1 ::= COMMA exp args1 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList a1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new ExpList(e, a1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args1 ::= 
            {
              ExpList RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // idexps ::= COMMA ID EQUAL exp idexps 
            {
              FieldExpList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldExpList idex = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new FieldExpList(Symbol.symbol(id), e, idex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idexps",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // idexps ::= 
            {
              FieldExpList RESULT =null;
		  RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idexps",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
