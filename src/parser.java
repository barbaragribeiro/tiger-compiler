
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler;

import Absyn.*;
import Symbol.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\004\000\002\003\006\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\011\000" +
    "\002\003\010\000\002\003\005\000\002\003\010\000\002" +
    "\003\006\000\002\003\006\000\002\003\012\000\002\003" +
    "\003\000\002\003\007\000\002\010\004\000\002\010\002" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\006\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\014\006\000\002\014\002\000\002\015" +
    "\007\000\002\015\002\000\002\016\006\000\002\016\010" +
    "\000\002\017\011\000\002\017\013\000\002\022\003\000" +
    "\002\020\003\000\002\020\005\000\002\020\006\000\002" +
    "\020\006\000\002\004\004\000\002\004\002\000\002\005" +
    "\005\000\002\005\002\000\002\006\004\000\002\006\002" +
    "\000\002\007\005\000\002\007\002\000\002\021\007\000" +
    "\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\030\010\021\017\004\034\010\035\015\040" +
    "\006\042\007\044\022\045\020\055\014\056\005\057\016" +
    "\001\002\000\030\010\021\017\004\034\010\035\015\040" +
    "\006\042\007\044\022\045\020\055\014\056\005\057\016" +
    "\001\002\000\070\002\ufffc\004\ufffc\006\ufffc\011\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\036\ufffc\037\ufffc\041\ufffc\043\ufffc\046\ufffc\047\ufffc" +
    "\052\ufffc\053\ufffc\054\ufffc\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\004\057\210\001" +
    "\002\000\070\002\ufffe\004\ufffe\006\ufffe\011\ufffe\013\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\036\ufffe\037\ufffe\041\ufffe\043\ufffe\046\ufffe\047\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\001\002\000\034\002\000\016\033" +
    "\017\025\020\040\021\035\023\032\024\030\025\027\026" +
    "\034\027\036\030\041\031\042\032\026\001\002\000\004" +
    "\002\207\001\002\000\076\002\uffff\004\uffff\006\uffff\007" +
    "\202\011\uffff\012\201\013\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027" +
    "\uffff\030\uffff\031\uffff\032\uffff\033\200\036\uffff\037\uffff" +
    "\041\uffff\043\uffff\046\uffff\047\uffff\052\uffff\053\uffff\054" +
    "\uffff\001\002\000\070\002\ufffd\004\ufffd\006\ufffd\011\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\036\ufffd\037\ufffd\041\ufffd\043\ufffd\046\ufffd\047" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\001\002\000\030\010\021" +
    "\017\004\034\010\035\015\040\006\042\007\044\022\045" +
    "\020\055\014\056\005\057\016\001\002\000\102\002\uffd1" +
    "\004\uffd1\006\uffd1\007\uffd1\010\156\011\uffd1\012\157\013" +
    "\uffd1\014\uffd2\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\036\uffd1\037\uffd1\041\uffd1\043\uffd1" +
    "\046\uffd1\047\uffd1\052\uffd1\053\uffd1\054\uffd1\001\002\000" +
    "\004\014\143\001\002\000\012\046\uffe2\052\062\053\070" +
    "\054\067\001\002\000\032\010\021\011\uffcc\017\004\034" +
    "\010\035\015\040\006\042\007\044\022\045\020\055\014" +
    "\056\005\057\016\001\002\000\070\002\uffe5\004\uffe5\006" +
    "\uffe5\011\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\036\uffe5\037\uffe5\041\uffe5\043\uffe5" +
    "\046\uffe5\047\uffe5\052\uffe5\053\uffe5\054\uffe5\001\002\000" +
    "\004\011\061\001\002\000\040\004\037\011\uffca\016\033" +
    "\017\025\020\040\021\035\023\032\024\030\025\027\026" +
    "\034\027\036\030\041\031\042\032\026\047\uffca\001\002" +
    "\000\030\010\021\017\004\034\010\035\015\040\006\042" +
    "\007\044\022\045\020\055\014\056\005\057\016\001\002" +
    "\000\030\010\021\017\004\034\010\035\015\040\006\042" +
    "\007\044\022\045\020\055\014\056\005\057\016\001\002" +
    "\000\030\010\021\017\004\034\010\035\015\040\006\042" +
    "\007\044\022\045\020\055\014\056\005\057\016\001\002" +
    "\000\030\010\021\017\004\034\010\035\015\040\006\042" +
    "\007\044\022\045\020\055\014\056\005\057\016\001\002" +
    "\000\006\011\uffcd\047\uffcd\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\070\002\uffed\004" +
    "\uffed\006\uffed\011\uffed\013\uffed\015\uffed\016\033\017\025" +
    "\020\040\021\035\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\036\uffed\037\uffed\041\uffed" +
    "\043\uffed\046\uffed\047\uffed\052\uffed\053\uffed\054\uffed\001" +
    "\002\000\054\002\ufff2\004\ufff2\006\ufff2\011\ufff2\013\ufff2" +
    "\015\ufff2\016\033\017\025\020\040\021\035\031\042\032" +
    "\026\036\ufff2\037\ufff2\041\ufff2\043\ufff2\046\ufff2\047\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\001\002\000\070\002\ufff6\004" +
    "\ufff6\006\ufff6\011\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\036\ufff6\037\ufff6\041\ufff6" +
    "\043\ufff6\046\ufff6\047\ufff6\052\ufff6\053\ufff6\054\ufff6\001" +
    "\002\000\040\004\037\011\uffca\016\033\017\025\020\040" +
    "\021\035\023\032\024\030\025\027\026\034\027\036\030" +
    "\041\031\042\032\026\047\uffca\001\002\000\006\011\uffcb" +
    "\047\uffcb\001\002\000\054\002\ufff1\004\ufff1\006\ufff1\011" +
    "\ufff1\013\ufff1\015\ufff1\016\033\017\025\020\040\021\035" +
    "\031\042\032\026\036\ufff1\037\ufff1\041\ufff1\043\ufff1\046" +
    "\ufff1\047\ufff1\052\ufff1\053\ufff1\054\ufff1\001\002\000\070" +
    "\002\ufff5\004\ufff5\006\ufff5\011\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\036\ufff5\037" +
    "\ufff5\041\ufff5\043\ufff5\046\ufff5\047\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\001\002\000\054\002\ufff3\004\ufff3\006\ufff3\011" +
    "\ufff3\013\ufff3\015\ufff3\016\033\017\025\020\040\021\035" +
    "\031\042\032\026\036\ufff3\037\ufff3\041\ufff3\043\ufff3\046" +
    "\ufff3\047\ufff3\052\ufff3\053\ufff3\054\ufff3\001\002\000\070" +
    "\002\ufff7\004\ufff7\006\ufff7\011\ufff7\013\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\040\021\035\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\036\ufff7\037" +
    "\ufff7\041\ufff7\043\ufff7\046\ufff7\047\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\001\002\000\054\002\ufff4\004\ufff4\006\ufff4\011" +
    "\ufff4\013\ufff4\015\ufff4\016\033\017\025\020\040\021\035" +
    "\031\042\032\026\036\ufff4\037\ufff4\041\ufff4\043\ufff4\046" +
    "\ufff4\047\ufff4\052\ufff4\053\ufff4\054\ufff4\001\002\000\054" +
    "\002\ufff0\004\ufff0\006\ufff0\011\ufff0\013\ufff0\015\ufff0\016" +
    "\033\017\025\020\040\021\035\031\042\032\026\036\ufff0" +
    "\037\ufff0\041\ufff0\043\ufff0\046\ufff0\047\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\001\002\000\054\002\uffef\004\uffef\006\uffef" +
    "\011\uffef\013\uffef\015\uffef\016\033\017\025\020\040\021" +
    "\035\031\042\032\026\036\uffef\037\uffef\041\uffef\043\uffef" +
    "\046\uffef\047\uffef\052\uffef\053\uffef\054\uffef\001\002\000" +
    "\070\002\uffee\004\uffee\006\uffee\011\uffee\013\uffee\015\uffee" +
    "\016\033\017\025\020\040\021\035\023\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\036\uffee" +
    "\037\uffee\041\uffee\043\uffee\046\uffee\047\uffee\052\uffee\053" +
    "\uffee\054\uffee\001\002\000\070\002\ufff8\004\ufff8\006\ufff8" +
    "\011\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\040\021" +
    "\035\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\036\ufff8\037\ufff8\041\ufff8\043\ufff8\046" +
    "\ufff8\047\ufff8\052\ufff8\053\ufff8\054\ufff8\001\002\000\070" +
    "\002\ufffb\004\ufffb\006\ufffb\011\ufffb\013\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\036\ufffb\037" +
    "\ufffb\041\ufffb\043\ufffb\046\ufffb\047\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\001\002\000\004\057\134\001\002\000\012\046" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\001\002\000\012\046\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\001\002\000\004\046\131\001" +
    "\002\000\012\046\uffdf\052\uffdf\053\uffdf\054\uffdf\001\002" +
    "\000\004\057\117\001\002\000\004\057\073\001\002\000" +
    "\012\046\uffe2\052\062\053\070\054\067\001\002\000\004" +
    "\046\uffe3\001\002\000\004\026\074\001\002\000\010\014" +
    "\077\050\100\057\076\001\002\000\012\046\uffde\052\uffde" +
    "\053\uffde\054\uffde\001\002\000\012\046\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\001\002\000\006\015\uffd9\057\103\001\002" +
    "\000\004\051\101\001\002\000\004\057\102\001\002\000" +
    "\012\046\uffdb\052\uffdb\053\uffdb\054\uffdb\001\002\000\004" +
    "\005\106\001\002\000\004\015\105\001\002\000\012\046" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\001\002\000\004\057\107" +
    "\001\002\000\014\006\uffd2\011\uffd2\015\uffd2\026\uffd2\033" +
    "\uffd2\001\002\000\010\006\111\011\uffd7\015\uffd7\001\002" +
    "\000\004\057\113\001\002\000\006\011\uffda\015\uffda\001" +
    "\002\000\004\005\114\001\002\000\004\057\107\001\002" +
    "\000\010\006\111\011\uffd7\015\uffd7\001\002\000\006\011" +
    "\uffd8\015\uffd8\001\002\000\004\010\120\001\002\000\006" +
    "\011\uffd9\057\103\001\002\000\004\011\122\001\002\000" +
    "\006\005\124\026\123\001\002\000\030\010\021\017\004" +
    "\034\010\035\015\040\006\042\007\044\022\045\020\055" +
    "\014\056\005\057\016\001\002\000\004\057\107\001\002" +
    "\000\004\026\126\001\002\000\030\010\021\017\004\034" +
    "\010\035\015\040\006\042\007\044\022\045\020\055\014" +
    "\056\005\057\016\001\002\000\042\016\033\017\025\020" +
    "\040\021\035\023\032\024\030\025\027\026\034\027\036" +
    "\030\041\031\042\032\026\046\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\001\002\000\042\016\033\017\025\020\040\021\035" +
    "\023\032\024\030\025\027\026\034\027\036\030\041\031" +
    "\042\032\026\046\uffd4\052\uffd4\053\uffd4\054\uffd4\001\002" +
    "\000\032\010\021\017\004\034\010\035\015\040\006\042" +
    "\007\044\022\045\020\047\uffcc\055\014\056\005\057\016" +
    "\001\002\000\004\047\133\001\002\000\070\002\uffe4\004" +
    "\uffe4\006\uffe4\011\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\036\uffe4\037\uffe4\041\uffe4" +
    "\043\uffe4\046\uffe4\047\uffe4\052\uffe4\053\uffe4\054\uffe4\001" +
    "\002\000\006\005\135\033\136\001\002\000\004\057\107" +
    "\001\002\000\030\010\021\017\004\034\010\035\015\040" +
    "\006\042\007\044\022\045\020\055\014\056\005\057\016" +
    "\001\002\000\042\016\033\017\025\020\040\021\035\023" +
    "\032\024\030\025\027\026\034\027\036\030\041\031\042" +
    "\032\026\046\uffd6\052\uffd6\053\uffd6\054\uffd6\001\002\000" +
    "\004\033\141\001\002\000\030\010\021\017\004\034\010" +
    "\035\015\040\006\042\007\044\022\045\020\055\014\056" +
    "\005\057\016\001\002\000\042\016\033\017\025\020\040" +
    "\021\035\023\032\024\030\025\027\026\034\027\036\030" +
    "\041\031\042\032\026\046\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\001\002\000\004\057\144\001\002\000\004\026\145\001" +
    "\002\000\030\010\021\017\004\034\010\035\015\040\006" +
    "\042\007\044\022\045\020\055\014\056\005\057\016\001" +
    "\002\000\036\006\150\015\uffc4\016\033\017\025\020\040" +
    "\021\035\023\032\024\030\025\027\026\034\027\036\030" +
    "\041\031\042\032\026\001\002\000\004\015\155\001\002" +
    "\000\004\057\151\001\002\000\004\026\152\001\002\000" +
    "\030\010\021\017\004\034\010\035\015\040\006\042\007" +
    "\044\022\045\020\055\014\056\005\057\016\001\002\000" +
    "\036\006\150\015\uffc4\016\033\017\025\020\040\021\035" +
    "\023\032\024\030\025\027\026\034\027\036\030\041\031" +
    "\042\032\026\001\002\000\004\015\uffc5\001\002\000\070" +
    "\002\uffec\004\uffec\006\uffec\011\uffec\013\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\036\uffec\037" +
    "\uffec\041\uffec\043\uffec\046\uffec\047\uffec\052\uffec\053\uffec" +
    "\054\uffec\001\002\000\032\010\021\011\uffc8\017\004\034" +
    "\010\035\015\040\006\042\007\044\022\045\020\055\014" +
    "\056\005\057\016\001\002\000\030\010\021\017\004\034" +
    "\010\035\015\040\006\042\007\044\022\045\020\055\014" +
    "\056\005\057\016\001\002\000\034\013\161\016\033\017" +
    "\025\020\040\021\035\023\032\024\030\025\027\026\034" +
    "\027\036\030\041\031\042\032\026\001\002\000\100\002" +
    "\uffce\004\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\036\uffce\037\uffce\041\uffce\043\uffce\046\uffce\047" +
    "\uffce\051\162\052\uffce\053\uffce\054\uffce\001\002\000\030" +
    "\010\021\017\004\034\010\035\015\040\006\042\007\044" +
    "\022\045\020\055\014\056\005\057\016\001\002\000\070" +
    "\002\uffeb\004\uffeb\006\uffeb\011\uffeb\013\uffeb\015\uffeb\016" +
    "\033\017\025\020\040\021\035\023\032\024\030\025\027" +
    "\026\034\027\036\030\041\031\042\032\026\036\uffeb\037" +
    "\uffeb\041\uffeb\043\uffeb\046\uffeb\047\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\001\002\000\036\006\170\011\uffc6\016\033\017" +
    "\025\020\040\021\035\023\032\024\030\025\027\026\034" +
    "\027\036\030\041\031\042\032\026\001\002\000\004\011" +
    "\166\001\002\000\070\002\ufff9\004\ufff9\006\ufff9\011\ufff9" +
    "\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\036\ufff9\037\ufff9\041\ufff9\043\ufff9\046\ufff9\047" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\001\002\000\004\011\uffc9" +
    "\001\002\000\030\010\021\017\004\034\010\035\015\040" +
    "\006\042\007\044\022\045\020\055\014\056\005\057\016" +
    "\001\002\000\036\006\170\011\uffc6\016\033\017\025\020" +
    "\040\021\035\023\032\024\030\025\027\026\034\027\036" +
    "\030\041\031\042\032\026\001\002\000\004\011\uffc7\001" +
    "\002\000\034\016\033\017\025\020\040\021\035\023\032" +
    "\024\030\025\027\026\034\027\036\030\041\031\042\032" +
    "\026\036\174\001\002\000\030\010\021\017\004\034\010" +
    "\035\015\040\006\042\007\044\022\045\020\055\014\056" +
    "\005\057\016\001\002\000\070\002\uffe8\004\uffe8\006\uffe8" +
    "\011\uffe8\013\uffe8\015\uffe8\016\033\017\025\020\040\021" +
    "\035\023\032\024\030\025\027\026\034\027\036\030\041" +
    "\031\042\032\026\036\uffe8\037\176\041\uffe8\043\uffe8\046" +
    "\uffe8\047\uffe8\052\uffe8\053\uffe8\054\uffe8\001\002\000\030" +
    "\010\021\017\004\034\010\035\015\040\006\042\007\044" +
    "\022\045\020\055\014\056\005\057\016\001\002\000\070" +
    "\002\uffe9\004\uffe9\006\uffe9\011\uffe9\013\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\036\uffe9\037" +
    "\uffe9\041\uffe9\043\uffe9\046\uffe9\047\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\001\002\000\030\010\021\017\004\034\010\035" +
    "\015\040\006\042\007\044\022\045\020\055\014\056\005" +
    "\057\016\001\002\000\030\010\021\017\004\034\010\035" +
    "\015\040\006\042\007\044\022\045\020\055\014\056\005" +
    "\057\016\001\002\000\004\057\203\001\002\000\076\002" +
    "\uffd0\004\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\036\uffd0\037\uffd0\041\uffd0\043\uffd0\046\uffd0\047" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\001\002\000\034\013\205" +
    "\016\033\017\025\020\040\021\035\023\032\024\030\025" +
    "\027\026\034\027\036\030\041\031\042\032\026\001\002" +
    "\000\076\002\uffcf\004\uffcf\006\uffcf\007\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\036\uffcf\037\uffcf\041\uffcf\043\uffcf" +
    "\046\uffcf\047\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000" +
    "\070\002\uffea\004\uffea\006\uffea\011\uffea\013\uffea\015\uffea" +
    "\016\033\017\025\020\040\021\035\023\032\024\030\025" +
    "\027\026\034\027\036\030\041\031\042\032\026\036\uffea" +
    "\037\uffea\041\uffea\043\uffea\046\uffea\047\uffea\052\uffea\053" +
    "\uffea\054\uffea\001\002\000\004\002\001\001\002\000\004" +
    "\033\211\001\002\000\030\010\021\017\004\034\010\035" +
    "\015\040\006\042\007\044\022\045\020\055\014\056\005" +
    "\057\016\001\002\000\034\016\033\017\025\020\040\021" +
    "\035\023\032\024\030\025\027\026\034\027\036\030\041" +
    "\031\042\032\026\043\213\001\002\000\030\010\021\017" +
    "\004\034\010\035\015\040\006\042\007\044\022\045\020" +
    "\055\014\056\005\057\016\001\002\000\034\016\033\017" +
    "\025\020\040\021\035\023\032\024\030\025\027\026\034" +
    "\027\036\030\041\031\042\032\026\041\215\001\002\000" +
    "\030\010\021\017\004\034\010\035\015\040\006\042\007" +
    "\044\022\045\020\055\014\056\005\057\016\001\002\000" +
    "\070\002\uffe6\004\uffe6\006\uffe6\011\uffe6\013\uffe6\015\uffe6" +
    "\016\033\017\025\020\040\021\035\023\032\024\030\025" +
    "\027\026\034\027\036\030\041\031\042\032\026\036\uffe6" +
    "\037\uffe6\041\uffe6\043\uffe6\046\uffe6\047\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\001\002\000\034\016\033\017\025\020\040" +
    "\021\035\023\032\024\030\025\027\026\034\027\036\030" +
    "\041\031\042\032\026\041\220\001\002\000\030\010\021" +
    "\017\004\034\010\035\015\040\006\042\007\044\022\045" +
    "\020\055\014\056\005\057\016\001\002\000\070\002\uffe7" +
    "\004\uffe7\006\uffe7\011\uffe7\013\uffe7\015\uffe7\016\033\017" +
    "\025\020\040\021\035\023\032\024\030\025\027\026\034" +
    "\027\036\030\041\031\042\032\026\036\uffe7\037\uffe7\041" +
    "\uffe7\043\uffe7\046\uffe7\047\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\001\002\000\070\002\ufffa\004\ufffa\006\ufffa\011\ufffa\013" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\036\ufffa\037\ufffa\041\ufffa\043\ufffa\046\ufffa\047\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\012\002\011\003\010\020\012\022\016\001" +
    "\001\000\010\003\221\020\012\022\016\001\001\000\002" +
    "\001\001\000\010\003\216\020\012\022\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\172\020\012\022\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\064\011\070\012\062\016\063\017" +
    "\065\001\001\000\012\003\023\004\022\020\012\022\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\030\001\001\000\010\003\057\020\012\022\016\001\001" +
    "\000\010\003\056\020\012\022\016\001\001\000\010\003" +
    "\055\020\012\022\016\001\001\000\010\003\054\020\012" +
    "\022\016\001\001\000\002\001\001\000\010\003\053\020" +
    "\012\022\016\001\001\000\010\003\052\020\012\022\016" +
    "\001\001\000\010\003\051\020\012\022\016\001\001\000" +
    "\010\003\050\020\012\022\016\001\001\000\010\003\047" +
    "\020\012\022\016\001\001\000\010\003\045\020\012\022" +
    "\016\001\001\000\010\003\044\020\012\022\016\001\001" +
    "\000\010\003\043\020\012\022\016\001\001\000\010\003" +
    "\042\020\012\022\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\071\011\070\012" +
    "\062\016\063\017\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\107\001\001" +
    "\000\002\001\001\000\004\015\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\114" +
    "\001\001\000\004\015\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\127\020\012\022\016\001" +
    "\001\000\004\022\124\001\001\000\002\001\001\000\010" +
    "\003\126\020\012\022\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\023\004\131\020\012\022\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\137\001\001\000\010\003\136\020\012" +
    "\022\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\141\020\012\022\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\145\020" +
    "\012\022\016\001\001\000\004\021\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\152\020\012\022\016\001\001\000\004\021\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\163\006" +
    "\164\020\012\022\016\001\001\000\010\003\157\020\012" +
    "\022\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\162\020\012\022\016\001\001\000\002\001\001" +
    "\000\004\007\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\170\020\012\022\016" +
    "\001\001\000\004\007\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\174\020\012\022\016\001\001" +
    "\000\002\001\001\000\010\003\176\020\012\022\016\001" +
    "\001\000\002\001\001\000\010\003\205\020\012\022\016" +
    "\001\001\000\010\003\203\020\012\022\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\211\020\012\022\016\001\001\000\002" +
    "\001\001\000\010\003\213\020\012\022\016\001\001\000" +
    "\002\001\001\000\010\003\215\020\012\022\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\220\020" +
    "\012\022\016\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public static void main(String args[]) throws Exception {
		Yylex lexer = new Yylex(System.in);
		parser p = new parser(lexer);
		Exp result = (Exp) p.parse().value;
		Print pr = new Print(System.out);
		pr.prExp(result, 0);
		System.out.println("\n");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= l_value 
            {
              Exp RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExp(lv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= NIL 
            {
              Exp RESULT =null;
		 RESULT = new NilExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= INTEGER_CONSTANT 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntExp(i.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= STRING_CONSTANT 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringExp(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= OPEN_PARENTHESIS expseq CLOSE_PARENTHESIS 
            {
              Exp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SeqExp(es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= MINUS exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(new IntExp(0), OpExp.MINUS, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList a = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExp(Symbol.symbol(id), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.MINUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.PLUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp TIMES exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.MUL, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp DIV exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.DIV, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp NEQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.NE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp EQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.EQ, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp LT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.LT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp GT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.GT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp LTE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.LE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp GTE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.GE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.MUL, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp OR exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1, OpExp.PLUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= type_id OPEN_CURLY ID EQ exp idexps CLOSE_CURLY 
            {
              Exp RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Symbol tid = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldExpList ide = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordExp(tid, new FieldExpList(Symbol.symbol(id), e, ide)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= ID OPEN_SQUARE exp CLOSE_SQUARE OF exp 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayExp(Symbol.symbol(id), e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= l_value ATTRIBUTION exp 
            {
              Exp RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(lv, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= IF exp THEN exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= WHILE exp DO exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= FOR ID ATTRIBUTION exp TO exp DO exp 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForExp(new VarDec(Symbol.symbol(id), new NameTy(Symbol.symbol("int")), e1), e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= BREAK 
            {
              Exp RESULT =null;
		 RESULT = new BreakExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= LET decs IN expseq END 
            {
              Exp RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DecList ds = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LetExp(ds, new SeqExp(es)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // decs ::= dec decs 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList ds = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(d, ds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decs ::= 
            {
              DecList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dec ::= tydec 
            {
              Dec RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec td = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = td; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec ::= vardec 
            {
              Dec RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec vd = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec ::= fundec 
            {
              Dec RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec fd = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tydec ::= TYPE ID EQ ty 
            {
              TypeDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ty_left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ty_right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ty ty_ = (Ty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeDec(Symbol.symbol(id), ty_); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tydec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ty ::= ID 
            {
              Ty RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameTy(Symbol.symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ty",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ty ::= OPEN_CURLY tyfields CLOSE_CURLY 
            {
              Ty RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTy(tf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ty",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ty ::= ARRAY OF ID 
            {
              Ty RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayTy(Symbol.symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ty",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tyfields ::= ID COLON type_id tyfields1 
            {
              FieldList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol tid = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tyf1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyf1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList tyf1 = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldList(Symbol.symbol(id), tid, tyf1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tyfields ::= 
            {
              FieldList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tyfields1 ::= COMMA ID COLON type_id tyfields1 
            {
              FieldList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Symbol tid = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tyf1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyf1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList tyf1 = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldList(Symbol.symbol(id), tid, tyf1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tyfields1 ::= 
            {
              FieldList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyfields1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // vardec ::= VAR ID ATTRIBUTION exp 
            {
              VarDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDec(Symbol.symbol(id), null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // vardec ::= VAR ID COLON type_id ATTRIBUTION exp 
            {
              VarDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol tid = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDec(Symbol.symbol(id), new NameTy(tid), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fundec ::= FUNCTION ID OPEN_PARENTHESIS tyfields CLOSE_PARENTHESIS EQ exp 
            {
              FunctionDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tyfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tyfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldList tyf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(Symbol.symbol(id), tyf, null, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fundec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fundec ::= FUNCTION ID OPEN_PARENTHESIS tyfields CLOSE_PARENTHESIS COLON type_id EQ exp 
            {
              FunctionDec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tyfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tyfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList tyf = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Symbol tid = (Symbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(Symbol.symbol(id), tyf, new NameTy(tid), e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fundec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_id ::= ID 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Symbol.symbol(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // l_value ::= ID 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleVar(Symbol.symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // l_value ::= l_value DOT ID 
            {
              Var RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldVar(lv, Symbol.symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // l_value ::= l_value OPEN_SQUARE exp CLOSE_SQUARE 
            {
              Var RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SubscriptVar(lv, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // l_value ::= ID OPEN_SQUARE exp CLOSE_SQUARE 
            {
              Var RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SubscriptVar(new SimpleVar(Symbol.symbol(id)), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_value",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expseq ::= exp expseq1 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int es1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList es1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, es1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expseq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expseq ::= 
            {
              ExpList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expseq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expseq1 ::= SEMICOLON exp expseq1 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int es1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList es1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, es1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expseq1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expseq1 ::= 
            {
              ExpList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expseq1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // args ::= exp args1 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList a1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, a1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args ::= 
            {
              ExpList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // args1 ::= COMMA exp args1 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList a1 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, a1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args1 ::= 
            {
              ExpList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // idexps ::= COMMA ID EQ exp idexps 
            {
              FieldExpList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldExpList ide = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldExpList(Symbol.symbol(id), e, ide); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idexps",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // idexps ::= 
            {
              FieldExpList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idexps",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
